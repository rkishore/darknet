import os
import sys
import subprocess
import argparse
import shutil
import json
import string
import logging
from PIL import Image


logging.basicConfig(filename="/mnt/bigdrive1/cnn/project1-training-darknet-from-cleanedcsv.log", format='%(asctime)s %(levelname)s:%(message)s', level=logging.INFO)

parser = argparse.ArgumentParser(description="Generate training data in darknet format from the cleaned.csv file generated by fastai")
parser.add_argument('--inputfilepath', type=str, help='Path to input csv file', required=True)
parser.add_argument('--outputfilepath', type=str, help='Path to where output JPG files will be copied and labels files will created', required=True)
parser.add_argument('--outputcatfile', type=str, help='Path to where output names/categories file will be created', required=True)
parser.add_argument('--outputimagesfile', type=str, help='Path to where file with paths to output images will be created', required=True)

categories_for_img = ['cargo-truck',
                      'dump-truck',
                      'bongo-truck',
                      'tanker-truck',
                      'standard-bus',
                      'standard-compactor',
                      'stakebed-truck',
                      'flatbed-truck',
                      'lowboy-semi-truck']

num_cat_imgs = {}

total_categories = len(categories_for_img)
uniq_img_list = []

def convert_to_jpgfile_if_needed(cutout_image_filepath):
    
    input_imgfile_path = cutout_image_filepath
    input_png_imgfile_path = cutout_image_filepath.replace(".jpg", ".png")
    convert_log_filepath = cutout_image_filepath.replace(".jpg", ".log")
    img_width = -1.0
    img_height = -1.0
    logging.info(" Working on %s (inside convert)" % (input_imgfile_path,))

    
    if (os.path.exists("%s" % (input_imgfile_path,))):

        # Copy image file to final destination
        if (not os.path.exists("%s" % (input_png_imgfile_path,))):
            logging.info(" Moving %s to %s (logfile: %s)" % (input_imgfile_path, input_png_imgfile_path, convert_log_filepath,))
            shutil.move(input_imgfile_path, input_png_imgfile_path)

            with open(convert_log_filepath, "w") as ofp_log:
                logging.info(" Converting %s to %s" % (input_png_imgfile_path, input_imgfile_path,))
                convert_cmd_to_exec = "/usr/bin/convert %s %s" % (input_png_imgfile_path, input_imgfile_path,)
                ofp_log.write("%s\n" % (convert_cmd_to_exec))
                ofp_log.flush()
                subprocess.call(convert_cmd_to_exec, stdout=ofp_log, stderr=ofp_log, shell=True)
                ofp_log.flush()
                ffmpeg_info_cmd = "/usr/bin/ffmpeg -hide_banner -i \"%s\"" % (input_imgfile_path,)
                ofp_log.write("%s\n" % (ffmpeg_info_cmd))
                ofp_log.flush()
                subprocess.call(ffmpeg_info_cmd, stdout=ofp_log, stderr=ofp_log, shell=True)

        else:
            logging.info("%s already exists. Conversion finished for %s" % (input_png_imgfile_path, input_imgfile_path,))

    else:
        logging.error(" %s does not exist!" % (input_imgfile_path,))

    return input_imgfile_path

if __name__ == "__main__":

    args = vars(parser.parse_args())
    
    if not os.path.exists(args["inputfilepath"]) or not os.path.exists(args["outputfilepath"]):
        print "%s or %s does not exist" % (args["inputfilepath"], args["outputfilepath"],)
        exit(-1)

    logging.debug(" Command-line args: %s" % (str(args)))
    logging.info(" Input CSV filepath: %s, output folder: %s" % (args["inputfilepath"], args["outputfilepath"],))
    logging.info(" Output categories file: %s, output images file: %s" % (args["outputcatfile"], args["outputimagesfile"],))
    
    #cleaned_csv_path = "/mnt/bigdrive1/tracking/army_fouo/outputs/combined_training_data/cleaned.csv"
    #output_path = "/mnt/bigdrive1/tracking/army_fouo/outputs/combined_training_data_for_yolo/"
    if args["outputfilepath"].endswith("/"):
        output_img_path = args["outputfilepath"] + "images/"
        output_labels_path = args["outputfilepath"] + "labels/"
    else:
        output_img_path = args["outputfilepath"] + "/images/"
        output_labels_path = args["outputfilepath"] + "/labels/"

    if not os.path.exists(output_img_path) or not os.path.exists(output_labels_path):
        print "%s or %s does not exist" % (output_img_path, output_labels_path,)
        exit(-1)
        
    base_input_csv_path = args["inputfilepath"].rsplit("/", 1)[0]

    for cat in categories_for_img:
        num_cat_imgs[cat] = 0

    logging.info(" Number of categories: %d" % (len(categories_for_img)))
    #for idx,cat in enumerate(categories_for_img):
    #    print idx,cat
    with open(args["outputcatfile"], "w") as ofp:
        for cat in categories_for_img:
            ofp.write("%s\n" % (cat,))

    imagelist_ofp = open(args["outputimagesfile"], "w")
    
    num_lines = 0
    with open(args["inputfilepath"], "r") as ifp:
        for line in ifp:
            if line.startswith("name"):
                #print line.strip()
                continue

            split_line = line.split(",")
            img_name = split_line[0].rsplit("/", 1)[1].strip()
            full_img_path = base_input_csv_path + "/images/" + img_name
            full_output_img_path = output_img_path + img_name
            full_output_label_path = output_labels_path + img_name.replace(".jpg", ".txt")

            if not (img_name in uniq_img_list):
                uniq_img_list.append(img_name)
                imagelist_ofp.write("%s\n" % (full_output_img_path,))
            else:
                logging.info("DUPLICATE img: %s, recharacterized to cat: %s" % (img_name, split_line[1].strip(),))

            image_obj = Image.open(full_img_path)
            img_size_info = image_obj.size
            cur_category = split_line[1].strip()

            logging.info(" src: %s, dst: %s, label: %s" % (full_img_path, full_output_img_path, full_output_label_path,))
            #print "src: %s, dst: %s, label: %s" % (full_img_path, full_output_img_path, full_output_label_path,)

            img_width = img_size_info[0]
            img_height = img_size_info[1]
            x_center = img_width / 2.0
            y_center = img_height / 2.0
            x_center_normalized = x_center / img_width
            y_center_normalized = y_center / img_height
            img_width_normalized = img_width / img_width
            img_height_normalized = img_height / img_height

            logging.info(" Copying %s to %s" % (full_img_path, full_output_img_path,))
            shutil.copyfile(full_img_path, full_output_img_path)
            full_output_img_path = convert_to_jpgfile_if_needed(full_output_img_path)

            with open(full_output_label_path, "w") as ofp:
                logging.info(" Writing to %s: %d %0.6f %0.6f %0.6f %0.6f" % (full_output_label_path, categories_for_img.index(cur_category), x_center_normalized, y_center_normalized, img_width_normalized, img_height_normalized,))
                ofp.write("%d %0.6f %0.6f %0.6f %0.6f\n" % (categories_for_img.index(cur_category), x_center_normalized, y_center_normalized, img_width_normalized, img_height_normalized,))
                
            # print "%d %0.6f %0.6f %0.6f %0.6f" % (categories_for_img.index(cur_category), x_center_normalized, y_center_normalized, img_width_normalized, img_height_normalized,)
            #if cur_category.startswith("water-tanker") or cur_category.startswith("septic-tanker"):
            num_cat_imgs[cur_category] += 1
            num_lines += 1

    imagelist_ofp.close()
    
logging.info(" DEBUG STATS | number of images/cat: ")
for cat in categories_for_img:
    logging.info("%s %s" % (cat, num_cat_imgs[cat]))

logging.info(" DEBUG STATS | number of uniq images: %d/%d total" % (len(uniq_img_list), num_lines))
